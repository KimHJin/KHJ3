///////////////////////////////////////////////////////////////////////////////
// Code Name : IWON TEMP SCAN
//
// For STM8L0
//
// 2020/04/18 I-WON SOLUTION CO LTD
// 2020/04/18 v1.0 by KGY
///////////////////////////////////////////////////////////////////////////////

#include "IWON_SCAN.h"

// 센서 써미스터 특정 (소수점 연산을 위해서 1000 배수 한 것이다.)
// 범위 바뀌면 헤더 파일의 NTC_MIN, NTC_MAX 적용해야 함
const static INT32 NTC_TBL[] = {
		4251000, // -40
		3962000, // -39
		3695000, // -38
		3447000, // -37
		3218000, // -36
		3005000, // -35
		2807000, // -34
		2624000, // -33
		2454000, // -32
		2296000, // -31
		2149000, // -30
		2012000, // -29
		1885000, // -28
		1767000, // -27
		1656000, // -26
		1554000, // -25
		1458000, // -24
		1369000, // -23
		1286000, // -22
		1208000, // -21
		1135000, // -20
		1068000, // -19
		1004000, // -18
		945000,	 // -17
		889600,	 // -16
		837800,	 // -15
		789300,	 // -14
		743900,	 // -13
		701300,	 // -12
		661500,	 // -11
		624100,	 // -10
		589000,	 // -9
		556200,	 // -8
		525300,	 // -7
		496300,	 // -6
		469100,	 // -5
		443500,	 // -4
		419500,	 // -3
		396900,	 // -2
		375600,	 // -1
		355600,	 // 0
		336800,	 // 1
		319100,	 // 2
		302400,	 // 3
		286700,	 // 4
		271800,	 // 5
		257800,	 // 6
		244700,	 // 7
		232200,	 // 8
		220500,	 // 9
		209400,	 // 10
		198900,	 // 11
		189000,	 // 12
		179700,	 // 13
		170900,	 // 14
		162500,	 // 15
		154600,	 // 16
		147200,	 // 17
		140100,	 // 18
		133400,	 // 19
		127000,	 // 20
		121000,	 // 21
		115400,	 // 22
		110000,	 // 23
		104800,	 // 24
		100000,	 // 25
		95400,	 // 26
		91040,	 // 27
		86900,	 // 28
		82970,	 // 29
		79230,	 // 30
		75690,	 // 31
		72320,	 // 32
		69120,	 // 33
		66070,	 // 34
		63180,	 // 35
		60420,	 // 36
		57810,	 // 37
		55310,	 // 38
		52940,	 // 39
		50680,	 // 40
		48530,	 // 41
		46490,	 // 42
		44530,	 // 43
		42670,	 // 44
		40900,	 // 45
		39210,	 // 46
		37600,	 // 47
		36060,	 // 48
		34600,	 // 49
		33190,	 // 50
		31860,	 // 51
		30580,	 // 52
		29360,	 // 53
		28200,	 // 54
		27090,	 // 55
		26030,	 // 56
		25010,	 // 57
		24040,	 // 58
		23110,	 // 59
		22220,	 // 60
		21370,	 // 61
		20560,	 // 62
		19780,	 // 63
		19040,	 // 64
		18320,	 // 65
		17640,	 // 66
		16990,	 // 67
		16360,	 // 68
		15760,	 // 69
		15180,	 // 70
		14630,	 // 71
		14100,	 // 72
		13600,	 // 73
		13110,	 // 74
		12640,	 // 75
		12190,	 // 76
		11760,	 // 77
		11350,	 // 78
		10960,	 // 79
		10580,	 // 80
		10210,	 // 81
		9859,		 // 82
		9522,		 // 83
		9198,		 // 84
		8887,		 // 85
		8587,		 // 86
		8299,		 // 87
		8022,		 // 88
		7756,		 // 89
		7500,		 // 90
		7254,		 // 91
		7016,		 // 92
		6788,		 // 93
		6568,		 // 94
		6357,		 // 95
		6153,		 // 96
		5957,		 // 97
		5768,		 // 98
		5586,		 // 99
		5410,		 // 100
		5241,		 // 101
		5078,		 // 102
		4921,		 // 103
		4769,		 // 104
		4623,		 // 105
		4482,		 // 106
		4346,		 // 107
		4215,		 // 108
		4088,		 // 109
		3966,		 // 110
		3848,		 // 111
		3734,		 // 112
		3624,		 // 113
		3518,		 // 114
		3415,		 // 115
		3316,		 // 116
		3220,		 // 117
		3128,		 // 118
		3038,		 // 119
		2952,		 // 120
		2868,		 // 121
		2787,		 // 122
		2709,		 // 123
		2634,		 // 124
		2561		 // 125
};

// 독일센서 (HMS J11 F5.5 & HMS K11 F5.5) 써미스터 특성
const static INT32 NTC_TBL1[] = {
1655000,	// -30
1234000,	// -25
928700,
704500,
538500,
414600,
321700,
251400,
197800,
156600,
124800,
100000,
80630,
65380,
53310,
43680,
35980,
29770,
24750,
20670,
17340,
14600,
12350,
10480,
8930,
7635,		// 95
6551		// 100
};

// 28.1 ~ 41.5 (사물온도 기준)
// 33.4 ~ 42.5 (체온 기준)
// 테이블값 수정 (기본이된 중국 소스에 오류 있음) - 2020.05.23
// 136 개
/*
const static INT8 TB_TBL[] = {
		53, 53, 53, 53, 53, 53, 53, 52, 51, 50, 
		50, 50, 50, 50, 50, 50, 50, 50, 49, 48,
		48, 47, 47, 47, 46, 46, 46, 46, 46, 46, 
		46, 46, 46, 45, 45, 45, 44, 43, 43, 42,
		42, 41, 40, 39, 38, 38, 37, 36, 36, 35, 
		34, 34, 33, 32, 31, 30, 29, 28, 27, 26,
		25, 24, 23, 22, 21, 21, 20, 19, 18, 17, 
		16, 15, 15, 15, 14, 14, 14, 14, 13, 12,
		12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
		12, 12, 12, 12, 12, 12, 12, 12, 11, 10,
		10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
		10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
		10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
		10, 10, 10, 10, 10, 10};
*/

// 사물기준 28.1 ~ 42.2
// 체온기준 42.5 => 43.0 으로 변경해야 하므로 수량이 늘어남.
// 총 142 개로 늘어남.
/*
const static INT8 TB_TBL[] = {
		53, 52, 52, 51, 51, 51, 50, 50, 49, 49,
		48, 48, 47, 47, 46, 46, 45, 45, 45, 44,
		44, 43, 43, 42, 42, 42, 41, 41, 41, 41,
		40, 40, 40, 39, 39, 39, 38, 38, 38, 37, 
		37, 37, 36, 36, 36, 35, 35, 35, 34, 34, 
		33, 33, 32, 31, 31, 30, 30, 29, 29, 28, 
		27, 27, 26, 26, 25, 25, 24, 24, 23, 23, 
		23, 22, 22, 21, 21, 21, 20, 20, 19, 19, 
		19, 18, 18, 18, 17, 17, 17, 16, 16, 16, 
		15, 15, 15, 14, 14, 14, 14, 14, 13, 13, 
		13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 
		12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 
		11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 
		10, 10, 10, 10, 10, 10,	// 여기까지 425
		10, 10, 10, 10, 10 };	// 430 까지 늘림
*/
// 새로운 보정 (28.1~42.2) 총 142개
const static INT16 TB_TBL[] = {
5300,
5249,
5199,
5149,
5099,
5050,
5002,
4954,
4906,
4859,
4813,
4766,
4721,
4675,
4630,
4586,
4542,
4498,
4455,
4412,
4370,
4328,
4287,
4245,
4205,
4164,
4124,
4123,
4123,
4085,
4047,
4010,
3973,
3936,
3900,
3864,
3829,
3794,
3759,
3724,
3690,
3656,
3622,
3585,
3549,
3442,
3406,
3338,
3237,
3204,
3139,
3044,
2983,
2866,
2811,
2757,
2704,
2625,
2575,
2525,
2426,
2380,
2334,
2242,
2199,
2135,
2051,
2012,
1953,
1916,
1879,
1843,
1808,
1773,
1739,
1705,
1673,
1641,
1609,
1578,
1548,
1518,
1489,
1460,
1432,
1405,
1378,
1351,
1326,
1300,
1275,
1251,
1227,
1203,
1180,
1157,
1135,
1125,
1116,
1106,
1097,
1088,
1078,
1069,
1060,
1051,
1042,
1033,
1025,
1016,
1007,
999,
990,
982,
973,
965,
957,
949,
941,
933,
925,
917,
909,
901,
894,
886,
879,
871,
864,
856,
849,
842,
835,
828,
821,
814,
807,
800,
793,
786,
780,
773
};

// 생성자
IWON_TEMP_SCAN::IWON_TEMP_SCAN()
{
	TSUMN = DEFINED_TSUMN; // 온도 평균값을 만들기 위하여 몇개의 방을 써야할지 결정
	TSUMC = 0;
	TSUMB = NULL;

	InitTSUMB();
}
IWON_TEMP_SCAN::IWON_TEMP_SCAN(INT8 tsumn)
{
	TSUMN = tsumn; // 온도 평균값을 만들기 위하여 몇개의 방을 써야할지 결정
	TSUMC = 0;
	TSUMB = NULL;

	InitTSUMB();
}

// 소멸자
IWON_TEMP_SCAN::~IWON_TEMP_SCAN()
{
	if (TSUMB != NULL)
		free(TSUMB);
}

// 온도 평균값 구하는 링 메모리를 생성한다.
VOID IWON_TEMP_SCAN::InitTSUMB(VOID)
{
	if (TSUMB != NULL)
		free(TSUMB);
	TSUMB = (INT16 *)malloc(sizeof(INT16) * TSUMN);
}

//-----------------------------------------------------------------------------
// NTC 기준 테이블 인덱스 넘버를 찾는다.
// 입력 : MRES = 센서의 써미스터 저항 값
// 출력 : MRES 가 위치하는 NTC 테이블 인덱스 위치
//-----------------------------------------------------------------------------
INT16 IWON_TEMP_SCAN::GetNTCIndex(INT32 MRES, INT8 SENSOR_TYPE)
{
	INT16 index = -1;
	INT16 tbl_count;
	INT32 *ntc_tbl;
	if(SENSOR_TYPE==1)	// 독일센서
	{
		// 독일센서
		tbl_count = (sizeof(NTC_TBL1) / sizeof(INT32)) - 1;
		ntc_tbl = (INT32*)&NTC_TBL1[0];
	}
	else
	{
		// 초기에 사용한 중국 막센서
		tbl_count = (sizeof(NTC_TBL) / sizeof(INT32)) - 1;
		ntc_tbl = (INT32*)&NTC_TBL[0];
	}
	
	for (;;)
	{
		index++;
		if (index == tbl_count)
			break;
		if (MRES > *(ntc_tbl+index))
			return index;
	}
	return -1;
}

// NTC 기준 인덱스 번호화 실측된 값을 이용해서 해당 구간내의 보정 위치의 퍼센트를 계산한다.
// 그 이유는 실제 측정된 온도값의 저항값의 인덱스는 해당 NTC 구간의 1도 분해능이기 때문에
// 그 사이의 정확한 온도를 계산하기 위해서 측정된 값이 해당 구간의 어느 위치에 있는지 알아야 하기 때문이다.
// 입력 : MRES 센서의 써미스터 저항 값
//       MRES 의 index 해당 NTC 인덱스 위치 값
// 출력 : 해당 NTC 구간의 입력된 MRES 의 위치 퍼센트 값
INT16 IWON_TEMP_SCAN::GetNTCValueRatio(INT32 MRES, INT16 index, INT8 SENSOR_TYPE)
{
	INT32 NTCRL;
	INT32 NTCRH;

	if(SENSOR_TYPE==1)	// 독일센서
	{
		NTCRL = NTC_TBL1[index];
		NTCRH = NTC_TBL1[index - 1];
	}
	else
	{
		NTCRL = NTC_TBL[index];
		NTCRH = NTC_TBL[index - 1];
	}

	INT32 RM = MRES - NTCRL;
	INT32 RD = NTCRH - NTCRL;

	INT16 PR = (INT16)(RM * 100 / RD);
	return PR;
}

// 사물 온도를 인체 온도로 변환
// 입력 : T_OBJ 는 측정된 사물 온도를 10 배수한 정수이다.
// 출력 : -110 = LO
//       -120 = HI
INT16 IWON_TEMP_SCAN::GetTBLValue(INT16 T_OBJ)
{
	if (T_OBJ < TB_MIN)
		return -110;
	if (T_OBJ > TB_MAX)
		return -120;
	return TB_TBL[T_OBJ - TB_MIN];
}

VOID IWON_TEMP_SCAN::ClearTSUMB(VOID)
{
	TSUMC = 0;
	for (INT16 i = 0; i < TSUMN; i++)
	{
		TSUMB[i] = -999;
	}
}
INT16 IWON_TEMP_SCAN::GetTSUMB()
{
	INT32 B = 0;
	INT16 C = 0;
	for (INT8 i = 0; i < TSUMN; i++)
	{
		if (TSUMB[i] == -999)
			continue;
		B += (INT32)TSUMB[i];
		C++;
	}
	if (C == 0)
		return -999;
	return (INT16)(B / C);
}
INT16 IWON_TEMP_SCAN::AddTSUMB(INT16 B)
{
	TSUMB[TSUMC] = B;
	TSUMC++;
	if (TSUMC == TSUMN)
		TSUMC = 0;
	return GetTSUMB();
}
